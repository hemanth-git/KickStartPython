Regular Expressions:
--------------------
 Python can be accessed using the re module

  re.match matches at the beginning of a string.
  we would use raw strings as r"expression".
  Raw strings don't escape anything

import re
pattern = r"spam"
if re.match(pattern, "spamspamspam"):
   print("Match")
else:
   print("No match")

 re.search and re.findall. 
 The function re.search finds a match of a pattern anywhere in the string.
The function re.findall returns a list of all substrings that match a pattern.

import re
pattern = r"spam"
if re.match(pattern, "eggspamsausagespam"):
   print("Match")
else:
   print("No match")
if re.search(pattern, "eggspamsausagespam"):
   print("Match")
else:
   print("No match")
print(re.findall(pattern, "eggspamsausagespam"))

No match
Match
['spam', 'spam']

re.finditer does the same thing as re.findall, except it returns an iterator, rather than a list.


import re
pattern = r"pam"
match = re.search(pattern, "eggspamsausage")
if match:
   print(match.group())
   print(match.start())
   print(match.end())
   print(match.span())
output:
------------
pam
4
7
(4, 7)

sub:
---------------
re.sub(pattern, repl, string, max=0)

This method replaces all occurrences of the pattern in string with repl, substituting all occurrences, unless max provided. This method returns the modified string. 
Example:

import re
str = "My name is David. Hi David."
pattern = r"David"
newstr = re.sub(pattern, "Amy", str)
print(newstr)

MetaCharacter:
import re
pattern = r"gr.y"
if re.match(pattern, "grey"):
   print("Match 1")

if re.match(pattern, "gray"):
   print("Match 2")

if re.match(pattern, "blue"):
   print("Match 3")
ouput:
-----
Match 1
Match 2

The next two metacharacters are ^ and $.
These match the start and end of a string, respectively.
import re

pattern = r"^gr.y$"
if re.match(pattern, "grey"):
   print("Match 1")
if re.match(pattern, "gray"):
   print("Match 2")
if re.match(pattern, "stingray"):
   print("Match 3")

Match 1
Match 2

Character classes provide a way to match only one of a specific set of characters

pattern = r"[aeiou]"
if re.search(pattern, "grey"):
   print("Match 1")

The class [a-z] matches any lowercase alphabetic character.
The class [G-P] matches any uppercase character from G to P.
The class [0-9] matches any digit. 
[A-Za-z] multiple ranges can be included


pattern = r"[A-Z][A-Z][0-9]"
if re.search(pattern, "LS8"):
   print("Match 1")

if re.search(pattern, "E3"):
   print("Match 2")

 # output is Match 1
 The pattern in the example above matches strings that contain two alphabetic uppercase letters followed by a digit.


 #Place a ^ at the start of a character class to invert it. 
 This causes it to match any character other than the ones included. 
Other metacharacters such as $ and ., have no meaning within character classes. 
The metacharacter ^ has no meaning unless it is the first character in a class.
pattern = r"[^A-Z]"
if re.search(pattern, "this is all quiet"):
   print("Match 1")
if re.search(pattern, "AbCdEfG123"):
   print("Match 2")
if re.search(pattern, "THISISALLSHOUTING"):
   print("Match 3")

# gives Match1 and Match2
# ^ should be inside the brackets to invert the character class.


# Some more metacharacters are *, +, ?, { and }.
* means "zero or more repetitions of the previous thing"
"previous thing" can be a single character, a class, or a group of characters in parentheses.
pattern = r"egg(spam)*"
if re.match(pattern, "egg"):
   print("Match 1")
if re.match(pattern, "eggspamspamegg"):
   print("Match 2")
if re.match(pattern, "spam"):
   print("Match 3")

Match 1
Match 2

The example above matches strings that start with "egg" and follow with zero or more "spam"s.
###
The metacharacter + is very similar to *, except it means "one or more repetitions", as opposed to "zero or more repetitions
pattern = r"g+
if re.match(pattern, "g"):
   print("Match 1")

if re.match(pattern, "gggggggggggggg"):
   print("Match 2")

if re.match(pattern, "abc"):
   print("Match 3")
Match 1
Match 2

#The metacharacter ? means "zero or one repetitions".
pattern = r"ice(-)?cream"

if re.match(pattern, "ice-cream"):
   print("Match 1")

if re.match(pattern, "icecream"):
   print("Match 2")

if re.match(pattern, "sausages"):
   print("Match 3")

if re.match(pattern, "ice--ice"):
   print("Match 4")
Match 1
Match 2


Curly braces can be used to represent the number of repetitions between two numbers.
The regex {x,y} means "between x and y repetitions of something". 
Hence {0,1} is the same thing as ?.
If the first number is missing, it is taken to be zero. If the second number is missing, it is taken to be infinity.

pattern = r"9{1,3}$"
if re.match(pattern, "9"):
   print("Match 1")

if re.match(pattern, "999"):
   print("Match 2")

if re.match(pattern, "9999"):
   print("Match 3")

Match 1
Match 2

Groups
----------
The content of groups in a match can be accessed using the group function.
A call of group(0) or group() returns the whole match. 
A call of group(n), where n is greater than 0, returns the nth group from the left. 
The method groups() returns all groups up from 1.
Example:
pattern = r"a(bc)(de)(f(g)h)i"

match = re.match(pattern, "abcdefghijklmnop")
if match:
   print(match.group())
   print(match.group(0))
   print(match.group(1))
   print(match.group(2))
   print(match.groups())

abcdefghi
abcdefghi
bc
de
('bc', 'de', 'fgh', 'g')

Another important metacharacter is |.
This means "or", so red|blue matches either "red" or "blue".
Example:
import re

pattern = r"gr(a|e)y"

match = re.match(pattern, "gray")
if match:
   print ("Match 1")

match = re.match(pattern, "grey")
if match:
   print ("Match 2")    

match = re.match(pattern, "griy")
if match:
    print ("Match 3")

Match 1
Match 2

There are various special sequences you can use in regular expressions. They are written as a backslash followed by another character. 
One useful special sequence is a backslash and a number between 1 and 99, e.g., \1 or \17. This matches the expression of the group of that number.
pattern = r"(.+) \1"

match = re.match(pattern, "word word")
if match:
   print ("Match 1")

match = re.match(pattern, "?! ?!")
if match:
   print ("Match 2")    

match = re.match(pattern, "abc cde")
if match:
   print ("Match 3")
Note, that "(.+) \1" is not the same as "(.+) (.+)", because \1 refers to the first group's subexpression, which is the matched expression itself, and not the regex pattern.

More useful special sequences are \d, \s, and \w.
These match digits, whitespace, and word characters respectively. 
In ASCII mode they are equivalent to [0-9], [ \t\n\r\f\v], and [a-zA-Z0-9_].
In Unicode mode they match certain other characters, as well. For instance, \w matches letters with accents.
Versions of these special sequences with upper case letters - \D, \S, and \W - mean the opposite to the lower-case versions. For instance, \D matches anything that isn't a digit.
Example:
pattern = r"(\D+\d)"

match = re.match(pattern, "Hi 999!")

if match:
   print("Match 1")

match = re.match(pattern, "1, 23, 456!")
if match:
   print("Match 2")

match = re.match(pattern, " ! $?")
if match:
    print("Match 3")

 Match 1
 (\D+\d) matches one or more non-digits followed by a digit.


email extraction:
--------------------
pattern = r"([\w\.-]+)@([\w\.-]+)(\.[\w\.]+)"
[\w\.-]+ matches one or more word character, dot or dash.
The regex above says that the string should contain a word (with dots and dashes allowed), followed by the @ sign, then another similar word, then a dot and another word.

Our regex contains three groups:
1 - first part of the email address.
2 - domain name without the suffix.
3 - the domain suffix.

import re

pattern = r"([\w\.-]+)@([\w\.-]+)(\.[\w\.]+)"
str = "Please contact info@sololearn.com for assistance"

match = re.search(pattern, str)
if match:
   print(match.group())

info@sololearn.com